import net.wimpi.modbus.net.TCPMasterConnection;
import net.wimpi.modbus.msg.ReadMultipleRegistersRequest;
import net.wimpi.modbus.msg.ReadMultipleRegistersResponse;
import net.wimpi.modbus.msg.WriteSingleRegisterRequest;
import net.wimpi.modbus.io.ModbusTCPTransaction;
import net.wimpi.modbus.procimg.SimpleRegister;
import java.net.InetAddress;
import java.util.Random;

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Modbus Server
//String modbusHost = "127.0.0.1";  // üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô IP ‡∏Ç‡∏≠‡∏á Modbus Server
//String modbusHost = "61.91.5.188";  // üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô IP ‡∏Ç‡∏≠‡∏á Modbus Server
String modbusHost = "192.168.29.199";  // üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô IP ‡∏Ç‡∏≠‡∏á Modbus Server
int modbusPort = 502;  // üîπ Default Port ‡∏Ç‡∏≠‡∏á Modbus TCP
int unitId = 1; // üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Modbus ID
int ref = 0;  // üîπ ‡∏£‡∏µ‡∏à‡∏¥‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô
int count = 100; // üîπ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏à‡∏¥‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô
int loopCount = 1000;  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Modbus
TCPMasterConnection conn = null;
Random random = new Random();
try {
    InetAddress addr = InetAddress.getByName(modbusHost);
    conn = new TCPMasterConnection(addr);
    conn.setPort(modbusPort);
    conn.connect();  // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Modbus Server
    
    conn.setTimeout(5000);  // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á Timeout 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    log.info("‚úÖ Connected to Modbus Server at " + modbusHost + " with timeout 5000 ms");

    for (int i = 0; i < loopCount; i++) {
        log.info("üîÑ Iteration " + (i + 1));

        // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ Holding Registers (FC03) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î Modbus ID
        ReadMultipleRegistersRequest req = new ReadMultipleRegistersRequest(ref, count);
        req.setUnitID(unitId);
        ModbusTCPTransaction trans = new ModbusTCPTransaction(conn);
        trans.setRequest(req);
        trans.execute();

        // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        ReadMultipleRegistersResponse res = (ReadMultipleRegistersResponse) trans.getResponse();

        int threadNum = ctx.getThreadNum();
        if (threadNum < count) {
            int regValue = res.getRegister(threadNum).toShort();
            int newValue = regValue + 1;

            int writeDelay = 100 + random.nextInt(101);
            log.info("‚è≥ Delaying before write for " + writeDelay + " ms");
            Thread.sleep(writeDelay);

            // ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏µ‡∏à‡∏¥‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î Modbus ID
            WriteSingleRegisterRequest writeReq = new WriteSingleRegisterRequest(ref + threadNum, new SimpleRegister(newValue));
            writeReq.setUnitID(unitId);
            ModbusTCPTransaction writeTrans = new ModbusTCPTransaction(conn);
            writeTrans.setRequest(writeReq);
            writeTrans.execute();
            log.info("üìù Thread " + threadNum + " updated R" + (ref + threadNum) + " to " + newValue);
        }

        StringBuilder values = new StringBuilder("üìå Register Values: ");
        for (int j = 0; j < count; j++) {
            values.append("R" + (ref + j) + "=" + res.getRegister(j).toShort() + " ");
        }
        log.info(values.toString());
        vars.put("modbus_values", values.toString());
        SampleResult.setResponseData(values.toString(), "UTF-8");

        int delayTime = 100 + random.nextInt(101);
        log.info("‚è≥ Delay for " + delayTime + " ms");
        Thread.sleep(delayTime);
    }        
} catch (Exception e) {
    log.error("‚ùå Modbus Connection Error: " + e.getMessage());
    SampleResult.setResponseData("‚ùå Error: " + e.getMessage(), "UTF-8");
    SampleResult.setSuccessful(false);
} finally {
    if (conn != null) {
        try {
            if (conn.getModbusTransport() != null) {
                conn.getModbusTransport().close();
            }
            conn.close();
            log.info("üîå Connection closed successfully.");
        } catch (Exception ex) {
            log.error("‚ö† Error closing connection: " + ex.getMessage(), ex);
        }
    }
}
